// User Engagement Funnel
// User journey through bot features from OpenTelemetry events
let users = dependencies
| where timestamp > ago(7d) and name == "Custom Event" and customDimensions["event.name"] == "AI_Response_Sent"
| extend UserId = coalesce(
    tostring(customDimensions["user.id"]),
    tostring(customDimensions["userId"]),
    tostring(customDimensions["User.Id"]),
    tostring(customDimensions["user_id"])
)
| where isnotempty(UserId)
| summarize by UserId;

let ssoUsers = dependencies
| where timestamp > ago(7d) and name == "Custom Event" and customDimensions["event.name"] == "SSO_Command_Triggered"
| extend UserId = coalesce(
    tostring(customDimensions["user.id"]),
    tostring(customDimensions["userId"]),
    tostring(customDimensions["User.Id"]),
    tostring(customDimensions["user_id"])
)
| where isnotempty(UserId)
| summarize by UserId;

let aiUsers = dependencies
| where timestamp > ago(7d) and name == "Custom Event" and customDimensions["event.name"] == "External_AI_Success"
| extend UserId = coalesce(
    tostring(customDimensions["user.id"]),
    tostring(customDimensions["userId"]),
    tostring(customDimensions["User.Id"]),
    tostring(customDimensions["user_id"])
)
| where isnotempty(UserId)
| summarize by UserId;

let proactiveUsers = dependencies
| where timestamp > ago(7d) and name == "Custom Event" and customDimensions["event.name"] == "ProactiveMessage_Sent"
| extend UserId = coalesce(
    tostring(customDimensions["user.id"]),
    tostring(customDimensions["userId"]),
    tostring(customDimensions["User.Id"]),
    tostring(customDimensions["user_id"])
)
| where isnotempty(UserId)
| summarize by UserId;

print 
    TotalUsers = toscalar(users | count),
    UsersWhoTriedSSO = toscalar(ssoUsers | count),
    UsersWhoUsedAI = toscalar(aiUsers | count),
    UsersWhoGotProactive = toscalar(proactiveUsers | count),
    SSOAdoptionRate = round(100.0 * toscalar(ssoUsers | count) / max(toscalar(users | count), 1), 2),
    AIAdoptionRate = round(100.0 * toscalar(aiUsers | count) / max(toscalar(users | count), 1), 2),
    ProactiveRate = round(100.0 * toscalar(proactiveUsers | count) / max(toscalar(users | count), 1), 2)
